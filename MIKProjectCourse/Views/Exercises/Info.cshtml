@{
    ViewData["Title"] = "Code Formatting Guidelines in C#";
}

<div class="container">
    <h1>Code Formatting Guidelines</h1>
    <p>Before we continue with the exercises, make sure your code is structured like this so it works correctly.</p>

    <h2>1. Variables on Separate Lines</h2>
    <p>Each variable should be declared on a new line. For example:</p>
    <div class="code-container">
        <div class="code-header">Correct</div>
        <div class="code-content">
<pre><code class="language-csharp">
string student1 = "Kire";
string student2 = "Kire2";
</code></pre>
        </div>
    </div>

    <h2>2. Braces on Separate Lines</h2>
    <p>For <code>if</code> statements, <code>for</code> loops, and similar blocks, always place the opening and closing braces on new lines. For example:</p>
    <div class="code-container">
        <div class="code-header">Correct</div>
        <div class="code-content">
<pre><code class="language-csharp">
if (condition)
{
    // your code here
}

for (int i = 0; i &lt; 5; i++)
{
    // your code here
}
</code></pre>
        </div>
    </div>

   <h2>3. Add an Empty Line Before Statements</h2>
    <p>It is necessary to leave an empty line after variable declarations and before 
        <code>if</code>, <code>else</code>, 
        or other statements for the exercises to work correctly. This improves readability and ensures the exercise checker interprets your code properly.</p>

<div class="code-container">
    <div class="code-header">Example</div>
    <div class="code-content">
<pre><code class="language-csharp">
// Variable initialization
int age = 20;

// Statement
if (age >= 18)
{
    Console.WriteLine("Adult");
}
</code></pre>
    </div>
</div>


    <h2>4. Correct Code</h2>
    <p>Below the box where you enter the code, there is a slider that reveals the correct format and the answer for that specific exercise.  
    If you are stuck or unsure, feel free to reveal the answer.</p>

    <div class="navigation-buttons">
        <a href="@Url.Action("ManyToManyWithJoin", "DataBaseRelations")" class="btn btn-outline-primary">← Many-to-Many with Join Entity</a>
        <a href="@Url.Action("Index", "Exercises")" class="btn btn-primary">Exercise 1 →</a>
    </div>
</div>

<style>
    .container {
        max-width: 800px;
        padding: 20px;
        background-color: var(--bs-body-bg);
    }

    h1, h2 {
        color: var(--bs-heading-color);
        margin-bottom: 15px;
    }

    h1 {
        margin-bottom: 25px;
    }

    p {
        color: var(--bs-body-color);
        line-height: 1.6;
    }

    .code-container {
        margin: 20px 0;
        border: 1px solid var(--bs-border-color);
        border-radius: 5px;
        overflow: hidden;
        background-color: var(--code-bg);
    }

    .code-header {
        background-color: var(--code-header-bg);
        padding: 10px 15px;
        border-bottom: 1px solid var(--bs-border-color);
        font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, monospace;
        font-size: 0.9rem;
        color: var(--bs-body-color);
    }

    .code-content {
        padding: 15px;
        overflow-x: auto;
        font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, monospace;
    }

    pre {
        margin: 0;
        white-space: pre-wrap;
        background-color: transparent;
    }

    .navigation-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }

    .btn {
        padding: 8px 20px;
        border-radius: 4px;
        font-weight: 500;
        text-decoration: none;
        cursor: pointer;
    }

    .btn-primary {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        color: #fff;
    }

    .btn-outline-primary {
        color: var(--bs-primary);
        border-color: var(--bs-primary);
        background-color: transparent;
    }
</style>
