@{
    ViewData["Title"] = "String Arrays";
}

<div class="container">
    <h1>String Arrays</h1>
    <p>A string array holds a list of words or names.</p>

    <h2>Example: List of fruits</h2>

    <div class="form-check form-switch mb-3">
        <input class="form-check-input" type="checkbox" id="languageToggle" onchange="convertCode()">
        <label class="form-check-label" for="languageToggle">Convert to C#</label>
    </div>

    <div class="code-container">
        <div class="code-header">Code Example</div>
        <div class="code-content">
            <pre id="codeBlock" style="white-space: pre-wrap;">
string fruits[3] = {"Apple", "Banana", "Cherry"};
cout << fruits[0];
            </pre>
        </div>
    </div>

    <p><code>fruits[0]</code> gives you "Apple"</p>

    <h2>Loop through all the fruits:</h2>

    <div class="code-container">
        <div class="code-header">Code Example</div>
        <div class="code-content">
            <pre style="white-space: pre-wrap;">
for (int i = 0; i < 3; i++) {
    cout << fruits[i] << endl;
}
            </pre>
        </div>
    </div>

    <p>This is how we print all items in a string array.</p>

    <div class="navigation-buttons">
        <a href="@Url.Action("Arrays", "SP")" class="btn btn-outline-primary">⬅ Back</a>
        <a href="@Url.Action("Home", "Home")" class="btn btn-primary">🏠 Home</a>
    </div>
</div>

<style>
    .container {
        max-width: 800px;
        padding: 20px;
        background-color: var(--bs-body-bg);
    }

    h1, h2 {
        color: var(--bs-heading-color);
    }

    h1 {
        margin-bottom: 20px;
    }

    h2 {
        margin-top: 25px;
        margin-bottom: 15px;
    }

    p, ul, li, code {
        color: var(--bs-body-color);
        line-height: 1.6;
    }

    ul {
        padding-left: 20px;
    }

    .code-container {
        margin: 25px 0;
        border: 1px solid var(--bs-border-color);
        border-radius: 5px;
        overflow: hidden;
        background-color: var(--code-bg);
    }

    .code-header {
        background-color: var(--code-header-bg);
        padding: 10px 15px;
        border-bottom: 1px solid var(--bs-border-color);
        font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
        font-size: 0.9rem;
        color: var(--bs-body-color);
    }

    .code-content {
        padding: 15px;
        overflow-x: auto;
        font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    }

    pre {
        margin: 0;
        background-color: transparent;
    }

    .navigation-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }

    .btn {
        padding: 8px 20px;
        border-radius: 4px;
        font-weight: 500;
        text-decoration: none;
    }

    .btn-primary {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        color: #fff;
    }

    .btn-outline-primary {
        color: var(--bs-primary);
        border-color: var(--bs-primary);
        background-color: transparent;
    }

    .form-check {
        margin-bottom: 20px;
    }
</style>

<script>
    function convertCode() {
        const topic = "strings"; // fixed topic per page
        const isChecked = document.getElementById("languageToggle").checked;
        const codeBlock = document.getElementById("codeBlock");

        const cppCode = {
            strings: `string fruits[3] = {"Apple", "Banana", "Cherry"};
cout << fruits[0];`
        };

        const csharpCode = {
            strings: `string[] fruits = {"Apple", "Banana", "Cherry"};
Console.WriteLine(fruits[0]);`
        };

        codeBlock.textContent = isChecked ? csharpCode[topic] : cppCode[topic];
    }
</script>
