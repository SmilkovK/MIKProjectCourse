@{
    ViewData["Title"] = "Introduction to Models";
}

<div class="container">
    <h1>📌 Understanding Models in ASP.NET Core MVC</h1>

    <p>
        In ASP.NET Core MVC, <strong>Models</strong> are the part of your application that handles <strong>data and business logic</strong>.  
        They represent real-world things like users, products, or orders.
    </p>

    <hr />

    <h2>🔹 What is a Model?</h2>
    <div class="card">
        <div class="card-body">
            <p>
                A <strong>Model</strong> is a C# class that defines the structure of your data.  
                For example, a <strong>User</strong> model might have properties like <code>Name</code>, <code>Email</code>, and <code>Age</code>.
            </p>
            <p>
                Think of a model like a <strong>blueprint</strong> for your data. It tells the application what information exists and how it is stored.
            </p>
        </div>
    </div>

    <h2>🔹 Why Do We Need Models?</h2>
    <ul class="list-group mb-3">
        <li class="list-group-item">They define the <strong>structure of data</strong> in your application.</li>
        <li class="list-group-item">They allow your app to <strong>store, retrieve, and manipulate data</strong> easily.</li>
        <li class="list-group-item">They connect with <strong>databases</strong> using Entity Framework Core.</li>
        <li class="list-group-item">They help keep your code organized by separating data logic from UI logic.</li>
    </ul>

    <h2>🔹 Models and Controllers</h2>
    <div class="card">
        <div class="card-body">
            <p>
                Controllers use models to <strong>get or update data</strong>. For example:
            </p>
            <ul>
                <li>Controller asks the model for a list of users.</li>
                <li>Controller sends that data to the view to display it.</li>
            </ul>
            <p>
                Think of it like a restaurant:  
                <strong>Model</strong> = the kitchen (where the food/data is prepared),  
                <strong>Controller</strong> = the waiter (who takes orders and delivers food),  
                <strong>View</strong> = the plate and presentation (what the user sees).
            </p>
        </div>
    </div>

    <h2>🔹 How Models Look in Code</h2>
    <div class="card">
        <div class="card-body">
            <p>Here’s a simple example of a <strong>User</strong> model:</p>
            <pre><code class="language-csharp">
public class User
{
    public int Id { get; set; }      // Unique ID for the user
    public string Name { get; set; } // User's name
    public string Email { get; set; } // User's email
    public int Age { get; set; }     // User's age
}
            </code></pre>
            <p>
                ✅ Each property represents a piece of information about the user.  
                Controllers can use this model to <strong>create, read, update, or delete users</strong> in the database.
            </p>
        </div>
    </div>

    <h2>🔹 Key Points About Models</h2>
    <ul class="list-group mb-3">
        <li>Models represent the <strong>data</strong> in your app.</li>
        <li>Models are usually plain C# classes (<strong>POCOs</strong> – Plain Old CLR Objects).</li>
        <li>They work together with <strong>Controllers</strong> and <strong>Views</strong> to show and update information.</li>
        <li>They often map to <strong>database tables</strong> when using Entity Framework Core.</li>
    </ul>

    <hr />
    <p class="text-center text-muted">
        ✅ In short: Models = your data, Controllers = the middle-man, Views = what the user sees.
    </p>

    <div class="navigation-buttons">
        <a href="@Url.Action("ControllersExample", "Web")" class="btn btn-outline-primary ajax-link">← Controller Example with code</a>
        <a href="@Url.Action("Views_", "Web")" class="btn btn-primary ajax-link">Introduction to views →</a>
    </div>
</div>

<style>
    .container {
        max-width: 800px;
        padding: 20px;
    }

    h1 {
        margin-bottom: 20px;
    }

    h2 {
        margin-top: 25px;
        margin-bottom: 15px;
    }

    p, ul {
        line-height: 1.6;
    }

    ul {
        list-style-type: none;
        padding-left: 0;
    }

    ul li {
        margin-bottom: 8px;
    }

    hr {
        border-top: 1px solid #ddd;
        margin: 25px 0;
    }

    .card {
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
    }

    .card-body {
        padding: 15px;
    }

    pre code {
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
        display: block;
        margin-bottom: 20px;
        color: #333;
        font-family: Consolas, monospace;
    }

    .list-group-item {
        padding: 10px 15px;
        margin-bottom: 5px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f8f9fa;
    }

    .navigation-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }

    .btn {
        padding: 8px 20px;
        border-radius: 4px;
        font-weight: 500;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
    }

    .btn-outline-primary {
        color: #007bff;
        border-color: #007bff;
        background-color: transparent;
    }

    p.text-muted {
        color: #6c757d;
    }
</style>
