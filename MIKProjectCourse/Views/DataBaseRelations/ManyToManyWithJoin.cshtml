@{
    ViewData["Title"] = "Many-to-Many with Join Entity in C#";
}

<div class="container">
    <h1>Many-to-Many with Join Entity</h1>
    <p>In this variation of the <strong>Many-to-Many</strong> relationship, we introduce a join entity that allows us to store additional information about the relationship.</p>

    <h2>Scenario</h2>
    <p>A <strong>Student</strong> can enroll in many <strong>Courses</strong>, and a <strong>Course</strong> can have many <strong>Students</strong>. We use a join table to store additional details about the enrollment.</p>

    <div class="code-container">
        <div class="code-header">C# Entity Classes</div>
        <div class="code-content">
            <pre><code class="language-csharp">
public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }
    public List&lt;StudentCourse&gt; StudentCourses { get; set; }
}

public class Course
{
    public int Id { get; set; }
    public string Title { get; set; }
    public List&lt;StudentCourse&gt; StudentCourses { get; set; }
}

public class StudentCourse
{
    public int StudentId { get; set; }
    public Student Student { get; set; }
    public int CourseId { get; set; }
    public Course Course { get; set; }
    public string Grade { get; set; }
    public DateTime EnrollmentDate { get; set; }
}
            </code></pre>
        </div>
    </div>

    <p>Here, the <code>StudentCourse</code> entity acts as the join table and includes additional data.</p>

    <div class="navigation-buttons">
        <a href="@Url.Action("ManyToMany", "DataBaseRelations")" class="btn btn-outline-primary">← Basic Many-to-Many</a>
        <a href="@Url.Action("Info", "Exercises")" class="btn btn-primary">Start Exercises</a>
    </div>
</div>


<style>
    .container {
        max-width: 800px;
        padding: 20px;
        background-color: var(--bs-body-bg);
    }

    h1 {
        color: var(--bs-heading-color);
        margin-bottom: 20px;
    }

    h2 {
        color: var(--bs-heading-color);
        margin-top: 25px;
        margin-bottom: 15px;
    }

    p {
        color: var(--bs-body-color);
        line-height: 1.6;
    }

    .code-container {
        margin: 25px 0;
        border: 1px solid var(--bs-border-color);
        border-radius: 5px;
        overflow: hidden;
        background-color: var(--code-bg);
    }

    .code-header {
        background-color: var(--code-header-bg);
        padding: 10px 15px;
        border-bottom: 1px solid var(--bs-border-color);
        font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
        font-size: 0.9rem;
        color: var(--bs-body-color);
    }

    .code-content {
        padding: 15px;
        overflow-x: auto;
    }

    pre {
        margin: 0;
        white-space: pre-wrap;
        background-color: transparent;
    }

    code {
        font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    }

    .navigation-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }

    .btn {
        padding: 8px 20px;
        border-radius: 4px;
        font-weight: 500;
    }

    .btn-primary {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
    }

    .btn-outline-primary {
        color: var(--bs-primary);
        border-color: var(--bs-primary);
    }
</style>